# name: Infra + API Deployment

# on:
#   push:
#     branches:
#       - main  

# jobs:
#   terraform:
#     runs-on: ubuntu-latest
#     defaults:
#       run:
#         working-directory: terraform

#     steps:
#     - name: Checkout Code
#       uses: actions/checkout@v3

#     - name: Install Terraform
#       uses: hashicorp/setup-terraform@v2

#     - name: Initialize Terraform
#       run: terraform init

#     - name: Validate Terraform
#       run: terraform validate

#     - name: Apply Terraform Changes
#       env:
#         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#       run: terraform apply -auto-approve

# below is another test if all not working revert to it

name: Infra Deployment

# uncomment these four lines when start working. Now I don't want pipeline to deploy resources so want it basically to fail.
# on:
#   push:
#     branches:
#       - main  # Runs on push to the main branch

permissions:
      id-token: write # This is required for aws oidc connection
      contents: read # This is required for actions/checkout
      pull-requests: write # This is required for gh bot to comment PR
env:
  TF_LOG: INFO
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Configure AWS Credentials (OIDC)
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ secrets.AWS_ROLE }}
        aws-region: ${{ secrets.AWS_REGION }}
        role-session-name: GitHub-OIDC-TERRAFORM

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.2.5

    - name: Terraform Init
      env:
        AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
        AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_BUCKET_KEY_NAME }}
      run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION}"

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      run: terraform plan -no-color

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: terraform  # Runs only after Terraform job succeeds
  #   steps:
  #   - name: Checkout Code
  #     uses: actions/checkout@v3

  #   - name: Install Dependencies
  #     run: npm install

  #   # - name: Run Tests
  #   #   run: npm test

  #   - name: Deploy to EC2
  #     env:
  #       PRIVATE_KEY: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
  #       HOST: ${{ secrets.AWS_EC2_HOST }}
  #       USER: ec2-user
  #     run: |
  #       echo "$PRIVATE_KEY" > private_key.pem
  #       chmod 600 private_key.pem
  #       ssh -o StrictHostKeyChecking=no -i private_key.pem $USER@$HOST << 'EOF'
  #         cd ~/project_DevOps
  #         git pull origin main
  #         npm install 
  #         pm2 restart all
  #       EOF

# name: "Terraform action"
# on:
#   push:
#     branches:
#       - main
#   pull_request:
# permissions:
#       id-token: write # This is required for aws oidc connection
#       contents: read # This is required for actions/checkout
#       pull-requests: write # This is required for gh bot to comment PR
# env:
#   TF_LOG: INFO
#   AWS_REGION: ${{ secrets.AWS_REGION }}
# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     defaults:
#       run:
#         shell: bash
#         working-directory: .
#     steps:
#       - name: Git checkout
#         uses: actions/checkout@v3

#       - name: Configure AWS credentials from AWS account
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           role-to-assume: ${{ secrets.AWS_ROLE }}
#           aws-region: ${{ secrets.AWS_REGION }}
#           role-session-name: GitHub-OIDC-TERRAFORM

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v2
#         with:
#           terraform_version: 1.2.5

#       - name: Terraform fmt
#         id: fmt
#         run: terraform fmt -check
#         continue-on-error: true

#       - name: Terraform Init
#         id: init
#         env:
#           AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
#           AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_BUCKET_KEY_NAME }}
#         run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION}"

#       - name: Terraform Validate
#         id: validate
#         run: terraform validate -no-color

#       - name: Terraform Plan
#         id: plan
      #   run: terraform plan -no-color
      #   if: github.event_name == 'pull_request'
      #   continue-on-error: true

      # - uses: actions/github-script@v6
      #   if: github.event_name == 'pull_request'
      #   env:
      #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
      #       #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
      #       #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
      #       <details><summary>Validation Output</summary>

      #       \`\`\`\n
      #       ${{ steps.validate.outputs.stdout }}
      #       \`\`\`

      #       </details>

      #       #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

      #       <details><summary>Show Plan</summary>

      #       \`\`\`\n
      #       ${process.env.PLAN}
      #       \`\`\`

      #       </details>

      #       *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })

      # - name: Terraform Plan Status
      #   if: steps.plan.outcome == 'failure'
      #   run: exit 1

      # - name: Terraform Apply
      #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      #   run: terraform apply -auto-approve -input=false
